<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Sergei Vovk | Blog - Java</title><link href="https://svovk.github.io/" rel="alternate"></link><link href="https://svovk.github.io/feeds/java.atom.xml" rel="self"></link><id>https://svovk.github.io/</id><updated>2018-07-01T23:50:00+03:00</updated><entry><title>Benchmark - reading integer values</title><link href="https://svovk.github.io/benchmark-reading-integer-values.html" rel="alternate"></link><published>2018-07-01T23:50:00+03:00</published><updated>2018-07-01T23:50:00+03:00</updated><author><name>Sergei Vovk</name></author><id>tag:svovk.github.io,2018-07-01:/benchmark-reading-integer-values.html</id><summary type="html">&lt;p&gt;I like solving algorithmic problems. One of the routines that you do working on such tasks is implementing code for reading input data. In the challenges your code has to provide right answers in a specified timeframe and to achieve this sometimes it isn't enough to tune your algorithm - it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I like solving algorithmic problems. One of the routines that you do working on such tasks is implementing code for reading input data. In the challenges your code has to provide right answers in a specified timeframe and to achieve this sometimes it isn't enough to tune your algorithm - it may be important to read input data fast. Especially it may be noticeable on problems with huge input datasets.&lt;/p&gt;
&lt;p&gt;To pick the fastest way I created a &lt;a href="https://github.com/svovk/jmh-benchmark-text-scanning"&gt;benchmark&lt;/a&gt; comparing different approaches for reading integers from a file (it is usual format of input data):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(measureScanner) &lt;code&gt;Scanner(File source)&lt;/code&gt; Scanner constructed based on FileReader&lt;/li&gt;
&lt;li&gt;(measureFileReaderScanner)&lt;code&gt;Scanner&lt;/code&gt; constructed using &lt;code&gt;Scanner(Readable source)&lt;/code&gt; constructor where &lt;code&gt;Readable&lt;/code&gt; is &lt;code&gt;FileReader&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(measureBufferedFileReaderScanner) &lt;code&gt;Scanner&lt;/code&gt; constructed using &lt;code&gt;Scanner(Readable source)&lt;/code&gt; constructor where &lt;code&gt;Readable&lt;/code&gt; is &lt;code&gt;FileReader&lt;/code&gt; wrapped in &lt;code&gt;BufferedReader&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(measureMyScanner) a bit reworked version of &lt;code&gt;MyScanner&lt;/code&gt; class (original one is published on &lt;a href="http://codeforces.com/blog/entry/7018"&gt;Codeforces&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And here are results that I get on my Mid 2012 MacBook Pro:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Benchmark                                           Mode  Cnt        Score       Error  Units
TextScanBenchmark.mesureBufferedFileReaderScanner  thrpt   25  1008316.536 ±  5711.553  ops/s
TextScanBenchmark.mesureFileReaderScanner          thrpt   25  1016116.706 ±  8823.260  ops/s
TextScanBenchmark.mesureMyScanner                  thrpt   25  6315469.046 ± 81171.672  ops/s
TextScanBenchmark.mesureScanner                    thrpt   25  1031693.182 ±  7556.776  ops/s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the same numbers on a plot (red lines show errors)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Integer Values Read Benchmark" src="https://svovk.github.io/images/20180701_speed_of_input_reading_java/integer_values_read_benchmark.png"&gt;&lt;/p&gt;
&lt;p&gt;What can we conclude based on this?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;first of all, it doesn't matter how you create Scanner class - passing a &lt;code&gt;File&lt;/code&gt; to the constructor, &lt;code&gt;FileReader&lt;/code&gt; class or &lt;code&gt;FileReader&lt;/code&gt; class wrapped in &lt;code&gt;BufferedReader&lt;/code&gt; (&lt;code&gt;Scanner&lt;/code&gt; class itself has buffering logic and adding another layer of buffering doesn't add any value)&lt;/li&gt;
&lt;li&gt;to speed up the file reading process a custom class may be used (my &lt;a href="https://github.com/svovk/jmh-benchmark-text-scanning/blob/master/src/main/java/com/sergeivovk/io/MyScanner.java"&gt;example&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;</content><category term="Java"></category><category term="Competitive Programming"></category></entry></feed>