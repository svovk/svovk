<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Sergei Vovk | Blog - Oracle Database</title><link href="https://svovk.github.io/" rel="alternate"></link><link href="https://svovk.github.io/feeds/oracle-database.atom.xml" rel="self"></link><id>https://svovk.github.io/</id><updated>2018-10-21T10:00:00+03:00</updated><entry><title>Transaction invalidation in PostgreSQL</title><link href="https://svovk.github.io/transaction-invalidation-in-postgresql.html" rel="alternate"></link><published>2018-10-21T10:00:00+03:00</published><updated>2018-10-21T10:00:00+03:00</updated><author><name>Sergei Vovk</name></author><id>tag:svovk.github.io,2018-10-21:/transaction-invalidation-in-postgresql.html</id><summary type="html">&lt;p&gt;A month ago I started to work on a product where PostgreSQL is used as a primary database. Before that, I closely worked with Oracle DB. No doubt, it is a great product but I find very interesting to focus on another RDBMS implementation. As I expected, there are a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A month ago I started to work on a product where PostgreSQL is used as a primary database. Before that, I closely worked with Oracle DB. No doubt, it is a great product but I find very interesting to focus on another RDBMS implementation. As I expected, there are a lot of distinctions between these databases. In this post, I would like to discuss one of them.&lt;/p&gt;
&lt;h2&gt;Statement-level rollback&lt;/h2&gt;
&lt;p&gt;Oracle (and in fact most of other RDBMS that I know) does a thing called statement-level rollback. In few words, it means that if some SQL statement fails with an exception, it will be rolled back. If the statement happened to be in a transaction, it also will be rolled back but the transaction itself will remain valid. Of course, user will be informed about the problem. Although the user will still have the ability to commit valid changes that were(and will be) made in the transaction.&lt;/p&gt;
&lt;h3&gt;Test - Oracle&lt;/h3&gt;
&lt;p&gt;For Oracle demonstration I will use &lt;code&gt;SQL*PLus&lt;/code&gt; command-line client.&lt;/p&gt;
&lt;p&gt;Suppose you have following relation&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt;   &lt;span class="nb"&gt;NUMBER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="n"&gt;VARCHAR2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;CONSTRAINT&lt;/span&gt; &lt;span class="n"&gt;test_pk&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;filled with some some initial data&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SQL&amp;gt; insert into test (id, data) values (1, &amp;#39;a&amp;#39;);
1 row created.
SQL&amp;gt; insert into test (id, data) values (2, &amp;#39;b&amp;#39;);
1 row created.
SQL&amp;gt; insert into test (id, data) values (3, &amp;#39;c&amp;#39;);
1 row created.
SQL&amp;gt; commit;
Commit complete.
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SQL&amp;gt; select * from test;
    ID DATA
---------- --------------------------------------------------
     1 a
     2 b
     3 c
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's try to issue a transaction attempting to insert 3 tuples including one that violates the unique constraint:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SQL&amp;gt; insert into test (id, data) values (5, &amp;#39;e&amp;#39;);
1 row created.
SQL&amp;gt; insert into test (id, data) values (3, &amp;#39;c&amp;#39;);

insert into test (id, data) values (3, &amp;#39;c&amp;#39;)
*
ERROR at line 1:
ORA-00001: unique constraint (TEST.TEST_PK) violated

SQL&amp;gt; insert into test (id, data) values (4, &amp;#39;d&amp;#39;);
1 row created.
SQL&amp;gt; commit;
Commit complete.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The question is what will be stored in the DB (if anything at all)? For &lt;em&gt;Oracle&lt;/em&gt; the answer is &lt;strong&gt;everything except the failed statement&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SQL&amp;gt; select * from test;
    ID DATA
---------- --------------------------------------------------
     1 a
     2 b
     3 c
     5 e
     4 d
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Test - PostgreSQL&lt;/h2&gt;
&lt;p&gt;For Postgres demonstration I will use &lt;code&gt;psql&lt;/code&gt; client. Note that it's important to switch off autocommit option (&lt;code&gt;\set AUTOCOMMIT off&lt;/code&gt;) before the test.&lt;/p&gt;
&lt;p&gt;Let's say there is a table like one in the previous test&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE TABLE test
(
  id integer,
  data varchar(50),
  CONSTRAINT test_pk PRIMARY KEY (id)
);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and holding the same initial data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test=# insert into test (id, data) values (1, &amp;#39;a&amp;#39;);
INSERT 0 1
test=# insert into test (id, data) values (2, &amp;#39;b&amp;#39;);
INSERT 0 1
test=# insert into test (id, data) values (3, &amp;#39;c&amp;#39;);
INSERT 0 1
test=# commit;
COMMIT
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test=# select * from test;
 id | data 
----+------
  1 | a
  2 | b
  3 | c
(3 rows)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's issue a transaction attempting to inserting 3 tuples including one violating the unique constraint on the table:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test=# insert into test (id, data) values (5, &amp;#39;e&amp;#39;);
INSERT 0 1
test=# insert into test (id, data) values (3, &amp;#39;c&amp;#39;);
ERROR:  duplicate key value violates unique constraint &amp;quot;test_pk&amp;quot;
DETAIL:  Key (id)=(3) already exists.
test=# insert into test (id, data) values (4, &amp;#39;d&amp;#39;);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
test=# commit;
ROLLBACK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The question is what will be stored into the DB (if something at all)? For &lt;em&gt;PostgreSQL&lt;/em&gt; the answer is &lt;strong&gt;nothing&lt;/strong&gt;!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test=# select * from test;
 id | data 
----+------
  1 | a
  2 | b
  3 | c
(3 rows)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Transaction invalidation&lt;/h2&gt;
&lt;p&gt;Actually, Postgres documentation says about this behavior in the second statement of "Transactions" chapter, but very shortly:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;if some failure occurs that prevents the transaction from completing, then none of the steps affect the database at all.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It worth to mention that &lt;code&gt;psql&lt;/code&gt; has &lt;code&gt;\set ON_ERROR_ROLLBACK ON&lt;/code&gt; mode which allows mimicking Oracle behavior. Although it doesn't change transaction processing logic on DB side - it just implicitly creates a SAVEPOINT before each statement and rollbacks to it in case of an error.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;While most of RDBMS do statement-level rollback PostgreSQL doesn't. I can't say if it is right or wrong. It is just the way it is. There are definitely both cons and pros for each transaction processing approach. Although the following is for sure - if you use Postgres you should keep in mind how transactions work in it.&lt;/p&gt;
&lt;p&gt;Also, if you need Oracle-like behavior in Postgres you may emulate it by setting savepoints in your transaction although it isn't a free lunch.&lt;/p&gt;</content><category term="Oracle Database"></category><category term="PostgreSQL"></category></entry><entry><title>Queries to start troubleshooting an Oracle Text index</title><link href="https://svovk.github.io/queries-to-start-troubleshooting-an-oracle-text-index.html" rel="alternate"></link><published>2018-08-08T10:00:00+03:00</published><updated>2018-08-08T10:00:00+03:00</updated><author><name>Sergei Vovk</name></author><id>tag:svovk.github.io,2018-08-08:/queries-to-start-troubleshooting-an-oracle-text-index.html</id><summary type="html">&lt;p&gt;Oracle Text is a full-text search engine available out of the box in all modern Oracle Database distributions. Its capabilities are integrated absolutely seamlessly into SQL and it might be a decent choice for providing Google-like search in Oracle ecosystems. &lt;/p&gt;
&lt;p&gt;In the real world, it is successfully used in many …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Oracle Text is a full-text search engine available out of the box in all modern Oracle Database distributions. Its capabilities are integrated absolutely seamlessly into SQL and it might be a decent choice for providing Google-like search in Oracle ecosystems. &lt;/p&gt;
&lt;p&gt;In the real world, it is successfully used in many business-grade software (including shipped by Oracle). I frequently work with this sort of systems. Inevitably it means that I face with different kinds of issues including related to Oracle Text. In this post, I will share few basic queries that I find useful for starting troubleshooting problems in Oracle Text indexes.&lt;/p&gt;
&lt;h3&gt;General Information&lt;/h3&gt;
&lt;p&gt;The first query is not directly related to Oracle Text. Although, often it makes sense to start an investigation by getting a definition of the table you experience the problem with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;dbms_metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_ddl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TABLE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;TABLE_NAME&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;OWNER&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;dual&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The following 2 queries have a lot of information in common. Although I usually run them both. The first one generates a script that may be used to set up specified index. The second one generates a human-readable report describing index properties.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;ctx_report&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_index_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;index_name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;dual&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;ctx_report&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;index_name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;dual&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Row-level queries&lt;/h3&gt;
&lt;p&gt;The question that arises almost always - are all rows of a table indexed? Here is a query that may answer it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
  &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;TABLE_NAME&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;rowid&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;textkey&lt;/span&gt;
          &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;dr$files_content_idx$k&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Although, if some row isn't indexed, it doesn't necessary means that something is wrong. For example, NULL values aren't eligible for indexing. Also, the row may be simply waiting in the queue. Here is a query that shows rows pending to be processed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
  &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;ctxsys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dr$pending&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
  &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;TABLE_NAME&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;
    &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rowid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pnd_rowid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Though "real" errors sometimes occur as well. You may find all affected rowids in issue-reporting table. Here is how to join it with your target table:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err_timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
  &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;ctxsys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dr$index_error&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
  &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;TABLE_NAME&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;
    &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rowid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ERR_TEXTKEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Summary queries&lt;/h3&gt;
&lt;p&gt;It also is easy to get an overview of what is going on with following queries. They select data from database views which are based on the same &lt;code&gt;ctxsys.dr$pending&lt;/code&gt; and &lt;code&gt;ctxsys.dr$index_error&lt;/code&gt; tables.&lt;/p&gt;
&lt;p&gt;Number of rows pending to be indexed: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;pnd_index_name&lt;/span&gt; &lt;span class="n"&gt;index_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;ctxsys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ctx_user_pending&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;pnd_index_name&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Errors count:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;err_index_name&lt;/span&gt; &lt;span class="n"&gt;index_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="n"&gt;err_text&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;ctx_user_index_errors&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;err_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="n"&gt;err_index_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Afterword&lt;/h3&gt;
&lt;p&gt;While Oracle Text is a black box in many aspects, it is possible to transparently check coverage of its indexes. It makes life of the maintaining personnel much easier. Though don't expect that you always will be able to extract some useful information from the error messages produced. Prepare yourself to face things like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DRG-11207: user filter command exited with status 3
DRG-00100: internal error, arguments : [50200],[drugi.c],[557],[],[]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DRG-11207: user filter command exited with status 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll have to contact Oracle support to troubleshoot them. Still some of the messages are self-explaining. A couple of examples that I saw recently:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DRG-11207: user filter command exited with status 1
DRG-11223: Third-party filter indicates this document is password protected or encrypted.
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DRG-11207: user filter command exited with status 1
DRG-11222: Third-party filter does not support this known document format.
&lt;/pre&gt;&lt;/div&gt;</content><category term="Oracle Database"></category><category term="Oracle Text"></category></entry><entry><title>Walkthrough - Creating an Oracle Database Docker Image</title><link href="https://svovk.github.io/walkthrough-creating-an-oracle-database-docker-image.html" rel="alternate"></link><published>2018-07-17T10:20:00+03:00</published><updated>2018-07-17T10:20:00+03:00</updated><author><name>Sergei Vovk</name></author><id>tag:svovk.github.io,2018-07-17:/walkthrough-creating-an-oracle-database-docker-image.html</id><summary type="html">&lt;p&gt;Docker containerization is super hot nowadays. Among the things I like the most - hey, it allows me to run Linux software on my Mac which makes my life much easier. Oracle Database is one of the products that aren't shipped for OS X which I use frequently. Fortunately, Oracle doesn't …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Docker containerization is super hot nowadays. Among the things I like the most - hey, it allows me to run Linux software on my Mac which makes my life much easier. Oracle Database is one of the products that aren't shipped for OS X which I use frequently. Fortunately, Oracle doesn't want to leave developers working with their software aside of this revolution and supports running many of their product within containers. In this post, I will go through steps of setting up a container having Oracle Database on board. We will need just a couple of things for it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker (surprised?)&lt;/li&gt;
&lt;li&gt;Oracle account&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Prepare the stage&lt;/h2&gt;
&lt;p&gt;In this guide we will build an Oracle Database Docker image ourselves. To do it, in the first place, we have to prepare a couple ingredients:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Clone Oracle &lt;code&gt;docker-images&lt;/code&gt; Git repository to your machine or download the repo as an &lt;a href="https://github.com/oracle/docker-images/archive/master.zip"&gt;archive&lt;/a&gt; and unzip it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/oracle/docker-images
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -L https://github.com/oracle/docker-images/archive/master.zip &amp;gt; docker-images.zip
unzip docker-images.zip
mv docker-images-master docker-images
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go to &lt;a href="http://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html"&gt;Oracle Database Software Downloads&lt;/a&gt; page and download x86-64 version of Oracle Database 12c Release 2 binaries. &lt;/p&gt;
&lt;p&gt;You will have to accept License Agreement and log in with your Oracle account.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="https://svovk.github.io/images/20180717_oracle_database_in_a_docker_container/accept_license.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="https://svovk.github.io/images/20180717_oracle_database_in_a_docker_container/download_oracle_database.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Put downloaded database distribution archive into &lt;code&gt;docker-images/OracleDatabase/SingleInstance/dockerfiles/12.2.0.1&lt;/code&gt; directory&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls -l docker-images/OracleDatabase/SingleInstance/dockerfiles/12.2.0.1
total 6745656
-rw-r--r--  1 svovk  staff          62 Jul 17 09:35 Checksum.ee
-rw-r--r--  1 svovk  staff          62 Jul 17 09:35 Checksum.se2
-rw-r--r--  1 svovk  staff        2639 Jul 17 09:35 Dockerfile.ee
-rw-r--r--  1 svovk  staff        2645 Jul 17 09:35 Dockerfile.se2
-rwxr-xr-x  1 svovk  staff        1148 Jul 17 09:35 checkDBStatus.sh
-rwxr-xr-x  1 svovk  staff         905 Jul 17 09:35 checkSpace.sh
-rwxr-xr-x  1 svovk  staff        2953 Jul 17 09:35 createDB.sh
-rw-r--r--  1 svovk  staff        6878 Jul 17 09:35 db_inst.rsp
-rw-r--r--  1 svovk  staff        9203 Jul 17 09:35 dbca.rsp.tmpl
-rwxr-xr-x  1 svovk  staff        2250 Jul 17 09:35 installDBBinaries.sh
-rw-r--r--@ 1 svovk  staff  3453696911 Jul 17 11:24 linuxx64_12201_database.zip
-rwxr-xr-x  1 svovk  staff        6140 Jul 17 09:35 runOracle.sh
-rwxr-xr-x  1 svovk  staff        1015 Jul 17 09:35 runUserScripts.sh
-rwxr-xr-x  1 svovk  staff         758 Jul 17 09:35 setPassword.sh
-rwxr-xr-x  1 svovk  staff         876 Jul 17 09:35 setupLinuxEnv.sh
-rwxr-xr-x  1 svovk  staff         678 Jul 17 09:35 startDB.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Build the image&lt;/h2&gt;
&lt;p&gt;Ok, at this point everything is ready to build the image itself. It requires only 2 commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd docker-images/OracleDatabase/SingleInstance/dockerfiles/
./buildDockerImage.sh -v 12.2.0.1 -e
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We pass following parameters to &lt;code&gt;buildDockerImage&lt;/code&gt; script:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-v&lt;/code&gt; specifies database version for which the image should be built&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt; says that we are going to build enterprise edition database&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Expect that it will take some time to build the image (on my Mid-2012 MacBook Pro it took about 30 minutes). At the end of the build process you'll see following message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Oracle Database Docker Image for &amp;#39;ee&amp;#39; version 12.2.0.1 is ready to be extended: 

--&amp;gt; oracle/database:12.2.0.1-ee

Build completed in 2005 seconds.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now list of available docker images should contain &lt;code&gt;oracle/database:12.2.0.1-ee&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker images
REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE
oracle/database          12.2.0.1-ee         163d644d8a0c        12 hours ago        13.2GB
oraclelinux              7-slim              b1af4ba0cf19        11 days ago         117MB
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Start the database!&lt;/h2&gt;
&lt;p&gt;All is ready to run a container based on the image we just created. But let me say few words about parameters that we will pass.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With &lt;code&gt;-e&lt;/code&gt; we specify environment variables. Using them we define SID, PDB names and also password that will be set for SYS, SYSTEM, and PDBADMIN database users.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt; parameter publishes container ports to the host machine. &lt;/li&gt;
&lt;li&gt;Finally, &lt;code&gt;-v&lt;/code&gt; specifies bind mount for the directory that stores Oracle data files. &lt;strong&gt;You should replace &lt;code&gt;/path/to/some/directory&lt;/code&gt; with some valid path on your computer.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run --name oracle-db12.2-ee \
-p 1521:1521 -p 5500:5500 \
-e ORACLE_SID=ORCL1 \
-e ORACLE_PDB=ORCLPDB1 \
-e ORACLE_PWD=welcome \
-v /path/to/some/directory:/opt/oracle/oradata \
oracle/database:12.2.0.1-ee
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After executing the command, give it some time and you'll see following message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SQL&amp;gt; Disconnected from Oracle Database 12c Enterprise Edition Release 12.2.0.1.0 - 64bit Production
The Oracle base remains unchanged with value /opt/oracle
#########################
DATABASE IS READY TO USE!
#########################
The following output is now a tail of the alert.log:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not surprisingly, it indicates that your Oracle is up and running. Congratulations!&lt;/p&gt;
&lt;h2&gt;Create a new user&lt;/h2&gt;
&lt;p&gt;The first thing that I usually do once I have a freshly built database - creating a user. Let's connect via SQL*Plus and set one up!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;While our container is running, open additional terminal session and execute &lt;code&gt;docker stop -t 60 oracle-db12.2-ee&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker exec -it oracle-db12.2-ee /bin/bash
[oracle@1e0aed256c62 ~]$ sqlplus / as sysdba

SQL*Plus: Release 12.2.0.1.0 Production on Wed Jul 18 07:36:15 2018

Copyright (c) 1982, 2016, Oracle.  All rights reserved.

Connected to:
Oracle Database 12c Enterprise Edition Release 12.2.0.1.0 - 64bit Production

SQL&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I also have a habit to check in which instance we are on before doing anything, it might be completely not needed here, but:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SQL&amp;gt; select instance_name from v$instance;

INSTANCE_NAME
----------------
ORCL1
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let's create a user named &lt;code&gt;test&lt;/code&gt; which is identified by &lt;code&gt;testpwd&lt;/code&gt; password. Of course, you may change the name and password to whatever you want. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SQL&amp;gt; ALTER SESSION SET CONTAINER = orclpdb1;

Session altered.

SQL&amp;gt; grant connect, resource to test identified by testpwd container=current;

Grant succeeded.

SQL&amp;gt; GRANT CREATE SESSION TO test container=current;

Grant succeeded.
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;That's it!&lt;/h3&gt;
&lt;p&gt;We are all set now. We have a database running. We have a user in it. For reference, here is configuration that I used to connect SQLDeveloper via &lt;code&gt;test&lt;/code&gt; user to the database&lt;/p&gt;
&lt;p&gt;&lt;img src="https://svovk.github.io/images/20180717_oracle_database_in_a_docker_container/sqldeveloper_new_connection.png" width="100%" alt="SQL Developer New Connection"&gt;&lt;/p&gt;
&lt;h3&gt;How to stop/restart created container&lt;/h3&gt;
&lt;p&gt;Sooner or later you will need to stop the container. An important thing to keep in mind - it is recommended to give Oracle additional time for shutdown activities. By default, when you stop a container Docker waits 10 seconds and then kills it. This may be too tight for Oracle Database. Let's make Docker wait up to one minute.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker stop -t 60 oracle-db12.2-ee
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you didn't remove stopped container, it remains available and you may start it again with following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker start oracle-db12.2-ee
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command will start the container in background mode. You might also want to check its logs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker logs oracle-db12.2-ee
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;br&gt;That's all that have for this post, my best wishes in using Docker!&lt;/p&gt;</content><category term="Oracle Database"></category><category term="Docker"></category></entry></feed>